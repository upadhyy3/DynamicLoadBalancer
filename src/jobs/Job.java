package jobs;


import org.apache.log4j.Logger;

import java.io.*;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicBoolean;

/**
 * Job: This is class for Job. It contains Job's binary code, and can be serialized.
 */
public abstract class Job implements Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 6212756222960044811L;

//    private JobResult jobResult;

    protected String jobName;
    protected byte[] binaryCode;
    public boolean isRequest;
    private Integer workerThreadId;

    private static Integer MAX_JOB_SIZE = 65536;

    private UUID jobId;

    private static Logger logger = Logger.getLogger(Job.class);

    private Job() {
        this("null");
    }

    public Job(String jobName) {
      //  this.jobName = jobName;
        jobId = UUID.randomUUID();
//        jobResult = new JobResult();
        binaryCode = new byte[MAX_JOB_SIZE];
        isRequest = false;
    }
    
    public Job(boolean isRequest){
    	this("null");
    	this.isRequest = isRequest;
    }

    /**
     * This function returns the original file name for job
     * @return The original file name for job
     */
 
    public String getJobName() {
        return jobName;
    }

    /**
     * This function returns the new file name for job. That file is generated by program.
     * This name is used to distinguish the jobs with the same file name from different nodes.
     * @return The new file name for job
     */
    public String getExecuteName() {
        return jobName + "_" + jobId.toString();
    }

    public String getID () {
        return jobId.toString();
    }

    public void setWorkerThreadId(Integer id) {
        workerThreadId = id;
    }

    public Integer getWorkerThreadId() {
        return workerThreadId;
    }

    public abstract String toString();

    public abstract void run();

    public abstract boolean isFinished();

    public abstract void suspend(Long sleepTime);

    public abstract void resume();

    public abstract JobResult getResult();
}
